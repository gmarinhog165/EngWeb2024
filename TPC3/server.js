var http = require('http')
var fs = require('fs')
var url = require('url')
var axios = require('axios')


function genAtor(ator){
    pagHTML = `<!DOCTYPE html>
    <html>
        <head>
            <meta charset="utf-8"/>
            <title> Ator </title>
            <link rel="stylesheet" href="/w3.css"/>
        </head>
        <body>
            <div class="w3-card-4">
    
                <header class="w3-container w3-blue">
                  <h1><a href='/atores'>Lista de Atores</a></h1>
                </header>
                <h2>Lista de Filmes onde ${ator.nome} participou: </h2>
                <ul>
            `
    for (let key in ator.filmes) {
        let value = ator.filmes[key];
        pagHTML += `<li><a href='/filmes/${key}'>${value}</a></li>`
    }
    pagHTML += `</ul>
    </table>
            
            <footer class="w3-container w3-blue">
              <h5>Generated by EngWeb2024</h5>
            </footer>
            
        </div> 
    </body>
</html>
    `
    return pagHTML
}


function genAtores(atores){
    pagHTML = `<!DOCTYPE html>
    <html>
        <head>
            <meta charset="utf-8"/>
            <title> Lista de Atores </title>
            <link rel="stylesheet" href="/w3.css"/>
        </head>
        <body>
            <div class="w3-card-4">
    
                <header class="w3-container w3-blue">
                  <h1>Lista de Atores</h1>
                </header>
                <ul class="w3-ul w3-border">
            ` 
    atores.forEach(ator => {
        pagHTML += `<tr>
        <li><a href='/atores/${ator.id}'>${ator.nome}</a></li>
        `
    });
    pagHTML += `
    </ul>
            
            <footer class="w3-container w3-blue">
              <h5>Generated by EngWeb2024</h5>
            </footer>
            
        </div> 
    </body>
</html>
    `
    return pagHTML
}

function genGenero(genero){
    pagHTML = `<!DOCTYPE html>
    <html>
        <head>
            <meta charset="utf-8"/>
            <title> Género </title>
            <link rel="stylesheet" href="/w3.css"/>
        </head>
        <body>
            <div class="w3-card-4">
    
                <header class="w3-container w3-blue">
                  <h1><a href='/generos'>Lista de Géneros</a></h1>
                </header>
                
                <ul>
            `
    for (let key in genero.filmes) {
        let value = genero.filmes[key];
        pagHTML += `<li><a href='/filmes/${key}'>${value}</a></li>`
    }
    pagHTML += `</ul>
    </table>
            
            <footer class="w3-container w3-blue">
              <h5>Generated by EngWeb2024</h5>
            </footer>
            
        </div> 
    </body>
</html>
    `
    return pagHTML
}

function genGeneros(generos){
    pagHTML = `<!DOCTYPE html>
    <html>
        <head>
            <meta charset="utf-8"/>
            <title> Lista de Géneros </title>
            <link rel="stylesheet" href="/w3.css"/>
        </head>
        <body>
            <div class="w3-card-4">
    
                <header class="w3-container w3-blue">
                  <h1>Lista de Géneros</h1>
                </header>
                <ul class="w3-ul w3-border">
            ` 
    generos.forEach(gen => {
        pagHTML += `<tr>
        <li><a href='/generos/${gen.nome}'>${gen.nome}</a></li>
        `
    });
    pagHTML += `
    </ul>
            
            <footer class="w3-container w3-blue">
              <h5>Generated by EngWeb2024</h5>
            </footer>
            
        </div> 
    </body>
</html>
    `
    return pagHTML
}



function genFilme(filme){
    pagHTML = `<!DOCTYPE html>
    <html>
        <head>
            <meta charset="utf-8"/>
            <title> Lista de Filmes </title>
            <link rel="stylesheet" href="/w3.css"/>
        </head>
        <body>
            <div class="w3-card-4">
    
                <header class="w3-container w3-blue">
                  <h1><a href='/filmes'> Lista de Filmes</a></h1>
                </header>
                
                <table class="w3-table w3-striped">
                    <tr>
                        <th>Título</th>
                        <th>Ano</th>
                        <th>Elenco</th>
                        <th>Género</th>
                    </tr>
                    <tr>
                        <td>${filme.title}</td>
                        <td>${filme.year}</td>
                        <td>
            `
    for (let key in filme.cast) {
        let value = filme.cast[key];
        pagHTML += `<a href='/atores/${key}'>${value}</a>`
    }
    pagHTML += '</td><td>'
    for (let key in filme.genres) {
        let value = filme.genres[key];
        pagHTML += `<a href='/generos/${value}'>${value}</a>`
    }
    pagHTML += `</td>
    </table>
            
            <footer class="w3-container w3-blue">
              <h5>Generated by EngWeb2024</h5>
            </footer>
            
        </div> 
    </body>
</html>
    `
    return pagHTML
}



function genFilmes(filmes){
    pagHTML = `<!DOCTYPE html>
    <html>
        <head>
            <meta charset="utf-8"/>
            <title> Lista de Filmes </title>
            <link rel="stylesheet" href="/w3.css"/>
        </head>
        <body>
            <div class="w3-card-4">
    
                <header class="w3-container w3-blue">
                  <h1>Lista de Filmes</h1>
                </header>
                <ul class="w3-ul w3-border">
            ` 
    filmes.forEach(filme => {
        pagHTML += `<tr>
        <li><a href='/filmes/${filme.id}'>${filme.title}</a></li>
        `
    });
    pagHTML += `
    </ul>
            
            <footer class="w3-container w3-blue">
              <h5>Generated by EngWeb2024</h5>
            </footer>
            
        </div> 
    </body>
</html>
    `
    return pagHTML
}


http.createServer(function (req, res){
    var regex = /^\/filmes\/[a-z0-9]+$/
    var regex2 = /^\/generos\/\w+$/
    var regex3 = /^\/atores\/\d+$/
    var q = url.parse(req.url, true)
    if(q.pathname == '/'){
        fs.readFile('principal.html', function(erro,dados){
            res.writeHead(200, {'Content-Type': 'text/html; charset=utf-8'})
            res.write(dados)
            res.end()
        })
    }
    else if(q.pathname == '/filmes'){
        axios.get('http://localhost:3000/filmes')
        .then( function(resp){
            dados = resp.data
            pagHTML = genFilmes(dados)
            res.writeHead(200, {'Content-Type': 'text/html; charset=utf-8'})
            res.write(pagHTML)
            res.end()
        })
        .catch(function(erro){
            res.writeHead(500, {'Content-Type': 'text/html; charset=utf-8'})
            res.write("<pre>" + erro + "</pre>")
            res.end()
        })
    }
    else if(q.pathname == '/generos'){
        axios.get('http://localhost:3000/generos')
        .then( function(resp){
            dados = resp.data
            pagHTML = genGeneros(dados)
            res.writeHead(200, {'Content-Type': 'text/html; charset=utf-8'})
            res.write(pagHTML)
            res.end()
        })
        .catch(function(erro){
            res.writeHead(500, {'Content-Type': 'text/html; charset=utf-8'})
            res.write("<pre>" + erro + "</pre>")
            res.end()
        })
    }
    else if(q.pathname == '/atores'){
        axios.get('http://localhost:3000/atores')
        .then( function(resp){
            dados = resp.data
            pagHTML = genAtores(dados)
            res.writeHead(200, {'Content-Type': 'text/html; charset=utf-8'})
            res.write(pagHTML)
            res.end()
        })
        .catch(function(erro){
            res.writeHead(500, {'Content-Type': 'text/html; charset=utf-8'})
            res.write("<pre>" + erro + "</pre>")
            res.end()
        })
    }
    else if(regex.test(q.pathname)){
        axios.get('http://localhost:3000' + q.pathname)
        .then( function(resp){
            dados = resp.data
            pagHTML = genFilme(dados)
            res.writeHead(200, {'Content-Type': 'text/html; charset=utf-8'})
            res.write(pagHTML)
            res.end()
        })
        .catch(function(erro){
            res.writeHead(500, {'Content-Type': 'text/html; charset=utf-8'})
            res.write("<pre>" + erro + "</pre>")
            res.end()
        })
    }
    else if(regex2.test(q.pathname)){
        axios.get('http://localhost:3000' + q.pathname)
        .then( function(resp){
            dados = resp.data
            pagHTML = genGenero(dados)
            res.writeHead(200, {'Content-Type': 'text/html; charset=utf-8'})
            res.write(pagHTML)
            res.end()
        })
        .catch(function(erro){
            res.writeHead(500, {'Content-Type': 'text/html; charset=utf-8'})
            res.write("<pre>" + erro + "</pre>")
            res.end()
        })
    }
    else if(regex3.test(q.pathname)){
        axios.get('http://localhost:3000' + q.pathname)
        .then( function(resp){
            dados = resp.data
            pagHTML = genAtor(dados)
            res.writeHead(200, {'Content-Type': 'text/html; charset=utf-8'})
            res.write(pagHTML)
            res.end()
        })
        .catch(function(erro){
            res.writeHead(500, {'Content-Type': 'text/html; charset=utf-8'})
            res.write("<pre>" + erro + "</pre>")
            res.end()
        })
    }
    else if (q.pathname == '/w3.css'){
        fs.readFile('w3.css', function(erro,dados){
            res.writeHead(200, {'Content-Type': 'text/css'})
            res.write(dados)
            res.end()
        })
    }

    else {
        res.writeHead(400,{'Content-Type': 'text/html; charset=utf-8'}) // error 400 bad request, aparece no browser
        res.write('<p>Erro: pedido não suportado.</p>')
        res.write('<pre>' + q.pathname + '</pre>')
        res.end()
    }
    console.log(q.pathname)
}).listen(7777)